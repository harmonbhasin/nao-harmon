/************************************************
| CONFIGURATION FILE FOR NAO VIRAL MGS WORKFLOW |
************************************************/

/*************
| PARAMETERS |
*************/

params {
    // Read truncation (for trial runs)
    truncate_reads = false
    n_reads_trunc = 25000

    // Reference directories
    s3_dir = "s3://nao-harmon/prussin2019"
    raw_dir = "${params.s3_dir}/raw" // Raw data directory
    pub_dir = "${params.s3_dir}/output" // Publication directory

    // Path to TSV specifying sample/library configuration
    library_tab = "${projectDir}/libraries.csv"

    // Path to TSV with sample metadata (can be same as library tab iff there's a 1:1 mapping)
    sample_tab = "${params.library_tab}"

    // Path to adapter sequences for adapter trimming (in addition to auto-removal)
    adapters = "${projectDir}/ref/adapters.fasta"

    // References and indexes (normally generated by index workflow)
    ref_dir = "s3://nao-mgs-wb/ref/results"
    ribo_db = "${params.ref_dir}/ribo-ref-concat.fasta.gz" // Path to rRNA reference file for ribodepletion
    human_index_bt2 = "${params.ref_dir}/bt2-human-index.tar.gz" // Path to human Bowtie2 reference tarball
    other_index_bt2 = "${params.ref_dir}/bt2-other-index.tar.gz" // Path to Bowtie2 reference tarball for contaminants
    human_index_bb = "${params.ref_dir}/human-ref-index.tar.gz" // Path to human BBMap reference tarball
    other_index_bb = "${params.ref_dir}/other-ref-index.tar.gz" // Path to BBMap reference tarball for contaminants
    hv_index = "${params.ref_dir}/bt2-hv-index.tar.gz" // Bowtie2 index tarball for human-infecting virus genomes
    genomeid_map = "${params.ref_dir}/genomeid-to-taxid.json" // File mapping human-viral NCBI genome ids to taxids
    nodes = "${params.ref_dir}/taxonomy-nodes.dmp" // File specifying taxid tree structure
    hv_db = "${params.ref_dir}/human-viruses.tsv" // TSV file containing a list of human-infecting virus names and taxids
    kraken_db = "${params.ref_dir}/kraken-db.tar.gz" // Path to tarball containing Kraken reference DB
    viral_taxa_db = "${params.ref_dir}/viral-taxids.tsv.gz" // TSV file specifying viral taxonomic structure & nomenclature
    blast_nt_dir = "${params.ref_dir}/nt" // Directory containing BLAST nt DB

    // Paths to scripts
    script_dir = "${projectDir}/scripts" // Directory containing built-in scripts
    script_process_sam = "${params.script_dir}/process_sam_hv.py"
    script_process_kraken = "${params.script_dir}/process_kraken_hv.py"
    script_join_fastq = "${params.script_dir}/join_fastq.py"
    script_summarize_multiqc = "${params.script_dir}/summarize-multiqc-single.R"
    script_count_taxa = "${params.script_dir}/count-viral-taxa.R"

    // Length-normalized score threshold for filtering putative HV reads
    // Typically 15 if you want to do in-depth performance analysis, otherwise 20
    bt2_score_threshold = 20

    // Run classification workflow on pre-deduplication reads as well as fully preprocessed reads?
    classify_cleaned = false
    classify_cleaned_subset = 0.01 // Fraction of cleaned reads to run through classification

    // Validate putative HV hits by BLASTing against nt? (Warning: slow)
    blast_hv = false
}

workDir = "${params.s3_dir}/work"

/********************
| AWS CONFIGURATION |
********************/

aws {
    client {
        maxConnections = 1000
        maxErrorRetry = 10
        connectionTimeout = 0
        socketTimeout = 0
    }
    region = "us-east-1"
}

docker {
    enabled = true
}

fusion {
    enabled = true
    exportStorageCredentials = true
}

wave {
    enabled = true
}

/*************************
| PROCESS SPECIFICATIONS |
*************************/

process{
    errorStrategy = "retry"
    maxRetries = 3
    executor = "awsbatch"
    queue = "harmon-queue"

    // Single-core processes
    withLabel: single {
        cpus = 1
        memory = 4.GB
    }

    // Small multi-core processes
    withLabel: small {
        cpus = 8
        memory = 16.GB 
    }

    // Large multi-core processes
    withLabel: large {
        cpus = 16
        memory = 32.GB
    }

    // Maximum-scope, one-at-a-time processes
    withLabel: max {
        cpus = 32
        memory = 64.GB
    }

    // Docker images
    withLabel: base {
        container = "amazonlinux:latest"
    }
    withLabel: MultiQC {
        container = "multiqc/multiqc:v1.21"
    }
    withLabel: FASTQC {
        container = "staphb/fastqc:latest"
    }
    withLabel: BBTools {
        container = "staphb/bbtools:39.01"
    }
    withLabel: BLAST {
        container = "staphb/blast:latest"
    }
    withLabel: Bowtie2 {
        container = "staphb/bowtie2:latest"
    }
    withLabel: Kraken2 {
        container = "staphb/kraken2:latest"
    }
    withLabel: Bracken {
        container = "staphb/bracken:latest"
    }
    withLabel: pandas {
        container = "pandas/pandas:pip-all"
    }
    withLabel: biopython {
        container = "securebio/nao-pypkg"
    }
    withLabel: tidyverse {
        container = "rocker/tidyverse:latest"
    }
    withLabel: R {
        container = "securebio/nao-rpkg"
    }
    withLabel: seqtk {
        container = "staphb/seqtk:latest"
    }
    withLabel: cutadapt {
        container = "pipecraft/cutadapt:0"
    }
    withLabel: trimmomatic {
        container = "staphb/trimmomatic:latest"
    }
}
